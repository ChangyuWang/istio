[debug] Created tunnel using local port: '62103'

[debug] SERVER: "127.0.0.1:62103"

[debug] Original chart version: ""
[debug] CHART PATH: /Users/linsun/go/src/istio.io/istio/install/kubernetes/helm/istio

NAME:   dozing-jackal
REVISION: 1
RELEASED: Mon Feb  5 13:11:12 2018
CHART: istio-0.5.0
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
global:
  grafana:
    repository: docker.io/linsun/grafana
    tag: linsun
  hyperkube:
    repository: quay.io/coreos/hyperkube
    tag: v1.7.6_coreos.0
  mixer:
    repository: docker.io/linsun/mixer
    tag: linsun
  pilot:
    repository: docker.io/linsun/pilot
    tag: linsun
  proxy:
    repository: docker.io/linsun/proxy
    tag: linsun
  rbacEnabled: true
  security:
    repository: docker.io/linsun/istio-ca
    tag: linsun
  securityEnabled: false
  servicegraph:
    repository: docker.io/linsun/servicegraph
    tag: linsun
  sidecarInjectEnabled: false
  sidecarInjector:
    repository: docker.io/linsun/sidecar_injector
    tag: linsun
grafana:
  enabled: false
  imagePullPolicy: IfNotPresent
  ingress:
    annotations: null
    enabled: false
    hosts:
    - grafana.local
    tls: null
  nodeSelector: {}
  replicaCount: 1
  resources: {}
  service:
    externalPort: 9000
    internalPort: 9000
    name: http
    type: ClusterIP
imagePullPolicy: IfNotPresent
mixer:
  enabled: true
  global:
    grafana:
      repository: docker.io/linsun/grafana
      tag: linsun
    hyperkube:
      repository: quay.io/coreos/hyperkube
      tag: v1.7.6_coreos.0
    mixer:
      repository: docker.io/linsun/mixer
      tag: linsun
    pilot:
      repository: docker.io/linsun/pilot
      tag: linsun
    proxy:
      repository: docker.io/linsun/proxy
      tag: linsun
    rbacEnabled: true
    security:
      repository: docker.io/linsun/istio-ca
      tag: linsun
    securityEnabled: false
    servicegraph:
      repository: docker.io/linsun/servicegraph
      tag: linsun
    sidecarInjectEnabled: false
    sidecarInjector:
      repository: docker.io/linsun/sidecar_injector
      tag: linsun
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  prometheusStatsdExporter:
    imagePullPolicy: IfNotPresent
    repository: prom/statsd-exporter
    resources: {}
    tag: latest
  replicaCount: 1
  resources: {}
  serviceAccountName: default
nodeSelector: {}
pilot:
  enabled: true
  global:
    grafana:
      repository: docker.io/linsun/grafana
      tag: linsun
    hyperkube:
      repository: quay.io/coreos/hyperkube
      tag: v1.7.6_coreos.0
    mixer:
      repository: docker.io/linsun/mixer
      tag: linsun
    pilot:
      repository: docker.io/linsun/pilot
      tag: linsun
    proxy:
      repository: docker.io/linsun/proxy
      tag: linsun
    rbacEnabled: true
    security:
      repository: docker.io/linsun/istio-ca
      tag: linsun
    securityEnabled: false
    servicegraph:
      repository: docker.io/linsun/servicegraph
      tag: linsun
    sidecarInjectEnabled: false
    sidecarInjector:
      repository: docker.io/linsun/sidecar_injector
      tag: linsun
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  replicaCount: 1
  resources: {}
  serviceAccountName: default
prometheus:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    repository: docker.io/prom/prometheus
    tag: latest
  ingress:
    annotations: null
    enabled: false
    hosts:
    - prometheus.local
    tls: null
  nodeSelector: {}
  replicaCount: 1
  resources: {}
  service:
    externalPort: 9090
    internalPort: 9090
    name: web
    type: ClusterIP
resources: {}
security:
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  replicaCount: 1
  resources: {}
  serviceAccountName: default
service:
  nodePort:
    enabled: false
    port: 32000
serviceAccountName: default
servicegraph:
  enabled: false
  imagePullPolicy: IfNotPresent
  ingress:
    annotations: null
    enabled: false
    hosts:
    - servicegraph.local
    tls: null
  nodeSelector: {}
  prometheusAddr: http://prometheus:9090
  replicaCount: 1
  resources: {}
  service:
    externalPort: 8088
    internalPort: 8088
    name: http
    type: ClusterIP
sidecar-injector:
  global:
    grafana:
      repository: docker.io/linsun/grafana
      tag: linsun
    hyperkube:
      repository: quay.io/coreos/hyperkube
      tag: v1.7.6_coreos.0
    mixer:
      repository: docker.io/linsun/mixer
      tag: linsun
    pilot:
      repository: docker.io/linsun/pilot
      tag: linsun
    proxy:
      repository: docker.io/linsun/proxy
      tag: linsun
    rbacEnabled: true
    security:
      repository: docker.io/linsun/istio-ca
      tag: linsun
    securityEnabled: false
    servicegraph:
      repository: docker.io/linsun/servicegraph
      tag: linsun
    sidecarInjectEnabled: false
    sidecarInjector:
      repository: docker.io/linsun/sidecar_injector
      tag: linsun
sidecarInjector:
  enabled: true
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  replicaCount: 1
  resources: {}
  serviceAccountName: default
zipkin:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    repository: docker.io/openzipkin/zipkin
    tag: latest
  ingress:
    annotations: null
    enabled: false
    hosts:
    - zipkin.local
    tls: null
  nodeSelector: {}
  replicaCount: 1
  resources: {}
  service:
    externalPort: 9411
    internalPort: 9411
    name: http
    type: ClusterIP

HOOKS:
---
# dozing-jackal-mixer-create-cr
apiVersion: batch/v1
kind: Job
metadata:
  name: dozing-jackal-mixer-create-cr
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    app: mixer
    chart: mixer-0.5.0
    release: dozing-jackal
    heritage: Tiller
spec:
  template:
    metadata:
      name: dozing-jackal-mixer-create-cr
      labels:
        app: mixer
        release: dozing-jackal
    spec:
      serviceAccountName: dozing-jackal-mixer
      containers:
        - name: hyperkube
          image: "quay.io/coreos/hyperkube:v1.7.6_coreos.0"
          command:
            - ./kubectl
            - apply
            - -f
            - /tmp/mixer/custom-resources.yaml
          volumeMounts:
            - mountPath: "/tmp/mixer"
              name: tmp-configmap-mixer
      volumes:
        - name: tmp-configmap-mixer
          configMap:
            name: dozing-jackal-mixer-custom-resources
      restartPolicy: Never # CRD might take some time till they are available to comsume
MANIFEST:

---
# Source: istio/charts/mixer/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dozing-jackal-mixer
  labels:
    app: mixer
    chart: mixer-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: mixer
data:
  mapping.conf: |-
---
# Source: istio/charts/mixer/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dozing-jackal-mixer-custom-resources
  labels:
    app: mixer
    chart: mixer-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: mixer
data:
  custom-resources.yaml: |-    
    apiVersion: "config.istio.io/v1alpha2"
    kind: attributemanifest
    metadata:
      name: istioproxy
      namespace: default
    spec:
      attributes:
        origin.ip:
          valueType: IP_ADDRESS
        origin.uid:
          valueType: STRING
        origin.user:
          valueType: STRING
        request.headers:
          valueType: STRING_MAP
        request.id:
          valueType: STRING
        request.host:
          valueType: STRING
        request.method:
          valueType: STRING
        request.path:
          valueType: STRING
        request.reason:
          valueType: STRING
        request.referer:
          valueType: STRING
        request.scheme:
          valueType: STRING
        request.size:
          valueType: INT64
        request.time:
          valueType: TIMESTAMP
        request.useragent:
          valueType: STRING
        response.code:
          valueType: INT64
        response.duration:
          valueType: DURATION
        response.headers:
          valueType: STRING_MAP
        response.size:
          valueType: INT64
        response.time:
          valueType: TIMESTAMP
        source.uid:
          valueType: STRING
        source.user:
          valueType: STRING
        destination.uid:
          valueType: STRING
        connection.id:
          valueType: STRING
        connection.received.bytes:
          valueType: INT64
        connection.received.bytes_total:
          valueType: INT64
        connection.sent.bytes:
          valueType: INT64
        connection.sent.bytes_total:
          valueType: INT64
        connection.duration:
          valueType: DURATION
        context.protocol:
          valueType: STRING
        context.timestamp:
          valueType: TIMESTAMP
        context.time:
          valueType: TIMESTAMP
        api.service:
          valueType: STRING
        api.version:
          valueType: STRING
        api.operation:
          valueType: STRING
        api.protocol:
          valueType: STRING
        request.auth.principal:
          valueType: STRING
        request.auth.audiences:
          valueType: STRING
        request.auth.presenter:
          valueType: STRING
        request.api_key:
          valueType: STRING
    
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: attributemanifest
    metadata:
      name: kubernetes
      namespace: default
    spec:
      attributes:
        source.ip:
          valueType: IP_ADDRESS
        source.labels:
          valueType: STRING_MAP
        source.name:
          valueType: STRING
        source.namespace:
          valueType: STRING
        source.service:
          valueType: STRING
        source.serviceAccount:
          valueType: STRING
        destination.ip:
          valueType: IP_ADDRESS
        destination.labels:
          valueType: STRING_MAP
        destination.name:
          valueType: STRING
        destination.namespace:
          valueType: STRING
        destination.service:
          valueType: STRING
        destination.serviceAccount:
          valueType: STRING
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: stdio
    metadata:
      name: handler
      namespace: default
    spec:
      outputAsJson: true
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: logentry
    metadata:
      name: accesslog
      namespace: default
    spec:
      severity: '"Default"'
      timestamp: request.time
      variables:
        sourceIp: source.ip | ip("0.0.0.0")
        destinationIp: destination.ip | ip("0.0.0.0")
        sourceUser: source.user | ""
        method: request.method | ""
        url: request.path | ""
        protocol: request.scheme | "http"
        responseCode: response.code | 0
        responseSize: response.size | 0
        requestSize: request.size | 0
        latency: response.duration | "0ms"
      monitored_resource_type: '"UNSPECIFIED"'
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: rule
    metadata:
      name: stdio
      namespace: default
    spec:
      match: "true" # If omitted match is true.
      actions:
      - handler: handler.stdio
        instances:
        - accesslog.logentry
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: metric
    metadata:
      name: requestcount
      namespace: default
    spec:
      value: "1"
      dimensions:
        source_service: source.service | "unknown"
        source_version: source.labels["version"] | "unknown"
        destination_service: destination.service | "unknown"
        destination_version: destination.labels["version"] | "unknown"
        response_code: response.code | 200
      monitored_resource_type: '"UNSPECIFIED"'
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: metric
    metadata:
      name: requestduration
      namespace: default
    spec:
      value: response.duration | "0ms"
      dimensions:
        source_service: source.service | "unknown"
        source_version: source.labels["version"] | "unknown"
        destination_service: destination.service | "unknown"
        destination_version: destination.labels["version"] | "unknown"
        response_code: response.code | 200
      monitored_resource_type: '"UNSPECIFIED"'
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: metric
    metadata:
      name: requestsize
      namespace: default
    spec:
      value: request.size | 0
      dimensions:
        source_service: source.service | "unknown"
        source_version: source.labels["version"] | "unknown"
        destination_service: destination.service | "unknown"
        destination_version: destination.labels["version"] | "unknown"
        response_code: response.code | 200
      monitored_resource_type: '"UNSPECIFIED"'
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: metric
    metadata:
      name: responsesize
      namespace: default
    spec:
      value: response.size | 0
      dimensions:
        source_service: source.service | "unknown"
        source_version: source.labels["version"] | "unknown"
        destination_service: destination.service | "unknown"
        destination_version: destination.labels["version"] | "unknown"
        response_code: response.code | 200
      monitored_resource_type: '"UNSPECIFIED"'
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: metric
    metadata:
      name: tcpbytesent
      namespace: default
      labels:
        istio-protocol: tcp # needed so that mixer will only generate when context.protocol == tcp
    spec:
      value: connection.sent.bytes | 0
      dimensions:
        source_service: source.service | "unknown"
        source_version: source.labels["version"] | "unknown"
        destination_service: destination.service | "unknown"
        destination_version: destination.labels["version"] | "unknown"
      monitored_resource_type: '"UNSPECIFIED"'
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: metric
    metadata:
      name: tcpbytereceived
      namespace: default
      labels:
        istio-protocol: tcp # needed so that mixer will only generate when context.protocol == tcp
    spec:
      value: connection.received.bytes | 0
      dimensions:
        source_service: source.service | "unknown"
        source_version: source.labels["version"] | "unknown"
        destination_service: destination.service | "unknown"
        destination_version: destination.labels["version"] | "unknown"
      monitored_resource_type: '"UNSPECIFIED"'
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: prometheus
    metadata:
      name: handler
      namespace: default
    spec:
      metrics:
      - name: request_count
        instance_name: requestcount.metric.default
        kind: COUNTER
        label_names:
        - source_service
        - source_version
        - destination_service
        - destination_version
        - response_code
      - name: request_duration
        instance_name: requestduration.metric.default
        kind: DISTRIBUTION
        label_names:
        - source_service
        - source_version
        - destination_service
        - destination_version
        - response_code
        buckets:
          explicit_buckets:
            bounds: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]
      - name: request_size
        instance_name: requestsize.metric.default
        kind: DISTRIBUTION
        label_names:
        - source_service
        - source_version
        - destination_service
        - destination_version
        - response_code
        buckets:
          exponentialBuckets:
            numFiniteBuckets: 8
            scale: 1
            growthFactor: 10
      - name: response_size
        instance_name: responsesize.metric.default
        kind: DISTRIBUTION
        label_names:
        - source_service
        - source_version
        - destination_service
        - destination_version
        - response_code
        buckets:
          exponentialBuckets:
            numFiniteBuckets: 8
            scale: 1
            growthFactor: 10
      - name: tcp_bytes_sent
        instance_name: tcpbytesent.metric.default
        kind: COUNTER
        label_names:
        - source_service
        - source_version
        - destination_service
        - destination_version
      - name: tcp_bytes_received
        instance_name: tcpbytereceived.metric.default
        kind: COUNTER
        label_names:
        - source_service
        - source_version
        - destination_service
        - destination_version
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: rule
    metadata:
      name: promhttp
      namespace: default
      labels:
        istio-protocol: http
    spec:
      actions:
      - handler: handler.prometheus
        instances:
        - requestcount.metric
        - requestduration.metric
        - requestsize.metric
        - responsesize.metric
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: rule
    metadata:
      name: promtcp
      namespace: default
      labels:
        istio-protocol: tcp # needed so that mixer will only execute when context.protocol == TCP
    spec:
      actions:
      - handler: handler.prometheus
        instances:
        - tcpbytesent.metric
        - tcpbytereceived.metric
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: kubernetesenv
    metadata:
      name: handler
      namespace: default
    spec:
    
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: rule
    metadata:
      name: kubeattrgenrule
      namespace: default
    spec:
      actions:
      - handler: handler.kubernetesenv
        instances:
        - attributes.kubernetes
    ---
    apiVersion: "config.istio.io/v1alpha2"
    kind: kubernetes
    metadata:
      name: attributes
      namespace: default
    spec:
      # Pass the required attribute data to the adapter
      source_uid: source.uid | ""
      source_ip: source.ip | ip("0.0.0.0") # default to unspecified ip addr
      destination_uid: destination.uid | ""
      destination_ip: destination.ip | ip("0.0.0.0") # default to unspecified ip addr
      origin_uid: '""'
      origin_ip: ip("0.0.0.0") # default to unspecified ip addr
      attribute_bindings:
        # Fill the new attributes from the adapter produced output.
        # $out refers to an instance of OutputTemplate message
        source.ip: $out.source_pod_ip
        source.labels: $out.source_labels
        source.namespace: $out.source_namespace
        source.service: $out.source_service
        source.serviceAccount: $out.source_service_account_name
        destination.ip: $out.destination_pod_ip
        destination.labels: $out.destination_labels
        destination.namespace: $out.destination_namespace
        destination.service: $out.destination_service
        destination.serviceAccount: $out.destination_service_account_name
    ---
---
# Source: istio/charts/sidecar-injector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dozing-jackal-sidecar-injector
  labels:
    app: sidecar-injector
    chart: sidecar-injector-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: sidecar-injector
data:
  config: |-
    policy: enabled
    template: |-
      initContainers:
      - name: istio-init
        image: docker.io/linsun/sidecar_injector:linsun
        args:
        - "-p"
        - {{ .MeshConfig.ProxyListenPort }}
        - "-u"
        - 1337
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        restartPolicy: Always
      containers:
      - name: istio-proxy
        image: docker.io/linsun/proxy:linsun
        args:
        - proxy
        - sidecar
        - --configPath
        - {{ .ProxyConfig.ConfigPath }}
        - --binaryPath
        - {{ .ProxyConfig.BinaryPath }}
        - --serviceCluster
        {{ if ne "" (index .ObjectMeta.Labels "app") -}}
        - {{ index .ObjectMeta.Labels "app" }}
        {{ else -}}
        - "istio-proxy"
        {{ end -}}
        - --drainDuration
        - 2s
        - --parentShutdownDuration
        - 3s
        - --discoveryAddress
        - {{ .ProxyConfig.DiscoveryAddress }}
        - --discoveryRefreshDelay
        - 1s
        - --zipkinAddress
        - {{ .ProxyConfig.ZipkinAddress }}
        - --connectTimeout
        - 1s
        - --statsdUdpAddress
        - {{ .ProxyConfig.StatsdUdpAddress }}
        - --proxyAdminPort
        - {{ .ProxyConfig.ProxyAdminPort }}
        - --controlPlaneAuthPolicy
        - {{ .ProxyConfig.ControlPlaneAuthPolicy }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        imagePullPolicy: IfNotPresent
        securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 1337
        restartPolicy: Always
        volumeMounts:
        - mountPath: /etc/istio/proxy
          name: istio-envoy
        - mountPath: /etc/certs/
          name: istio-certs
          readOnly: true
      volumes:
      - emptyDir:
          medium: Memory
        name: istio-envoy
      - name: istio-certs
        secret:
          optional: true
          {{ if eq .Spec.ServiceAccountName "" -}}
          secretName: istio.default
          {{ else -}}
          secretName: {{ printf "istio.%s" .Spec.ServiceAccountName }}
          {{ end -}}
---
# Source: istio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dozing-jackal-istio-mesh-config
  labels:
    app: istio
    chart: istio-0.5.0
    release: dozing-jackal
    heritage: Tiller
data:
  mesh: |-
    #
    # Edit this list to avoid using mTLS to connect to these services.
    # Typically, these are control services (e.g kubernetes API server) that don't have istio sidecar
    # to transparently terminate mTLS authentication.
    # mtlsExcludedServices: ["kubernetes.default.svc.cluster.local"]

    # Set the following variable to true to disable policy checks by the Mixer.
    # Note that metrics will still be reported to the Mixer.
    disablePolicyChecks: false
    # Set enableTracing to false to disable request tracing.
    enableTracing: true
    #
    # To disable the mixer completely (including metrics), comment out
    # the following line
    mixerAddress: dozing-jackal-mixer.default:15004
    # This is the ingress service name, update if you used a different name
    ingressService: dozing-jackal-ingress
    #
    # Along with discoveryRefreshDelay, this setting determines how
    # frequently should Envoy fetch and update its internal configuration
    # from istio Pilot. Lower refresh delay results in higher CPU
    # utilization and potential performance loss in exchange for faster
    # convergence. Tweak this value according to your setup.
    rdsRefreshDelay: 1s
    #
    defaultConfig:
      # NOTE: If you change any values in this section, make sure to make
      # the same changes in start up args in istio-ingress pods.
      # See rdsRefreshDelay for explanation about this setting.
      discoveryRefreshDelay: 1s
      #
      # TCP connection timeout between Envoy & the application, and between Envoys.
      connectTimeout: 10s
      #
      ### ADVANCED SETTINGS #############
      # Where should envoy's configuration be stored in the istio-proxy container
      configPath: "/etc/istio/proxy"
      binaryPath: "/usr/local/bin/envoy"
      # The pseudo service name used for Envoy.
      serviceCluster: istio-proxy
      # These settings that determine how long an old Envoy
      # process should be kept alive after an occasional reload.
      drainDuration: 45s
      parentShutdownDuration: 1m0s
      #
      # Port where Envoy listens (on local host) for admin commands
      # You can exec into the istio-proxy container in a pod and
      # curl the admin port (curl http://localhost:15000/) to obtain
      # diagnostic information from Envoy. See
      # https://lyft.github.io/envoy/docs/operations/admin.html
      # for more details
      proxyAdminPort: 15000
      #
      # Address where istio Pilot service is running
      discoveryAddress: dozing-jackal-pilot.default:15003
      #
      # Zipkin trace collector
      zipkinAddress: zipkin.default:9411
      #
      # Statsd metrics collector. istio mixer exposes a UDP endpoint
      # to collect and convert statsd metrics into Prometheus metrics.
      statsdUdpAddress: dozing-jackal-mixer.default:9125
---
# Source: istio/charts/mixer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: mixer
    chart: mixer-0.5.0
    heritage: Tiller
    release: dozing-jackal
  name: dozing-jackal-mixer
---
# Source: istio/charts/pilot/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dozing-jackal-pilot
  labels:
    app: pilot
    chart: pilot-0.5.0
    heritage: Tiller
    release: dozing-jackal
---
# Source: istio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dozing-jackal-istio
  labels:
    app: istio
    chart: istio-0.5.0
    heritage: Tiller
    release: dozing-jackal
---
# Source: istio/charts/mixer/templates/crds.yaml
# Mixer CRDs
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: rules.config.istio.io
  labels:
    app: mixer
    package: istio.io.mixer
    istio: core
spec:
  group: config.istio.io
  names:
    kind: rule
    plural: rules
    singular: rule
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: quotas.config.istio.io
  labels:
    app: mixer
    package: quota
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: quota
    plural: quotas
    singular: quota
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: reportnothings.config.istio.io
  labels:
    app: mixer
    package: reportnothing
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: reportnothing
    plural: reportnothings
    singular: reportnothing
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: statsds.config.istio.io
  labels:
    app: mixer
    package: statsd
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: statsd
    plural: statsds
    singular: statsd
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: kubernetesenvs.config.istio.io
  labels:
    app: mixer
    package: kubernetesenv
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: kubernetesenv
    plural: kubernetesenvs
    singular: kubernetesenv
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: metrics.config.istio.io
  labels:
    app: mixer
    package: metric
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: metric
    plural: metrics
    singular: metric
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: svcctrls.config.istio.io
  labels:
    app: mixer
    package: svcctrl
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: svcctrl
    plural: svcctrls
    singular: svcctrl
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: stackdrivers.config.istio.io
  labels:
    app: mixer
    package: stackdriver
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: stackdriver
    plural: stackdrivers
    singular: stackdriver
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: logentries.config.istio.io
  labels:
    app: mixer
    package: logentry
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: logentry
    plural: logentries
    singular: logentry
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: prometheuses.config.istio.io
  labels:
    app: mixer
    package: prometheus
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: prometheus
    plural: prometheuses
    singular: prometheus
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: memquotas.config.istio.io
  labels:
    app: mixer
    package: memquota
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: memquota
    plural: memquotas
    singular: memquota
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: attributemanifests.config.istio.io
  labels:
    app: mixer
    package: istio.io.mixer
    istio: core
spec:
  group: config.istio.io
  names:
    kind: attributemanifest
    plural: attributemanifests
    singular: attributemanifest
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: kuberneteses.config.istio.io
  labels:
    app: mixer
    package: adapter.template.kubernetes
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: kubernetes
    plural: kuberneteses
    singular: kubernetes
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: noops.config.istio.io
  labels:
    app: mixer
    package: noop
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: noop
    plural: noops
    singular: noop
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: deniers.config.istio.io
  labels:
    app: mixer
    package: denier
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: denier
    plural: deniers
    singular: denier
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: stdios.config.istio.io
  labels:
    app: mixer
    package: stdio
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: stdio
    plural: stdios
    singular: stdio
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: checknothings.config.istio.io
  labels:
    app: mixer
    package: checknothing
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: checknothing
    plural: checknothings
    singular: checknothing
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: listentries.config.istio.io
  labels:
    app: mixer
    package: listentry
    istio: mixer-instance
spec:
  group: config.istio.io
  names:
    kind: listentry
    plural: listentries
    singular: listentry
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/crds.yaml
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1beta1
metadata:
  name: listcheckers.config.istio.io
  labels:
    app: mixer
    package: listchecker
    istio: mixer-adapter
spec:
  group: config.istio.io
  names:
    kind: listchecker
    plural: listcheckers
    singular: listchecker
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/pilot/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: routerules.config.istio.io
  labels:
    app: pilot
spec:
  group: config.istio.io
  names:
    kind: RouteRule
    listKind: RouteRuleList
    plural: routerules
    singular: routerule
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/pilot/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: egressrules.config.istio.io
  labels:
    app: pilot
spec:
  group: config.istio.io
  names:
    kind: EgressRule
    listKind: EgressRuleList
    plural: egressrules
    singular: egressrule
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/pilot/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: destinationpolicies.config.istio.io
  labels:
    app: pilot
spec:
  group: config.istio.io
  names:
    kind: DestinationPolicy
    listKind: DestinationPolicyList
    plural: destinationpolicies
    singular: destinationpolicy
  scope: Namespaced
  version: v1alpha2
---
# Source: istio/charts/mixer/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dozing-jackal-mixer
  labels:
    app: mixer
    chart: mixer-0.5.0
    heritage: Tiller
    release: dozing-jackal
rules:
- apiGroups: ["config.istio.io"] # istio CRD watcher
  resources: ["*"]
  verbs: ["create", "get", "list", "watch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "endpoints", "pods", "services", "namespaces", "secrets"]
  verbs: ["get", "list", "watch"]
---
# Source: istio/charts/pilot/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dozing-jackal-pilot
  labels:
    app: pilot
    chart: pilot-0.5.0
    heritage: Tiller
    release: dozing-jackal
rules:
- apiGroups: ["config.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["thirdpartyresources", "thirdpartyresources.extensions", "ingresses", "ingresses/status"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["endpoints", "pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["namespaces", "nodes", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["externaladmissionhookconfigurations"]
  verbs: ["create", "update", "delete"]
---
# Source: istio/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: istio
    chart: istio-0.5.0
    heritage: Tiller
    release: dozing-jackal
  name: dozing-jackal-istio
rules:
- apiGroups: ["extensions"]
  resources: ["thirdpartyresources", "ingresses"]
  verbs: ["get", "watch", "list", "update"]
- apiGroups: [""]
  resources: ["configmaps", "pods", "endpoints", "services"]
  verbs: ["get", "watch", "list"]
---
# Source: istio/charts/mixer/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dozing-jackal-mixer
  labels:
    app: mixer
    chart: mixer-0.5.0
    heritage: Tiller
    release: dozing-jackal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dozing-jackal-mixer
subjects:
  - kind: ServiceAccount
    name: dozing-jackal-mixer
    namespace: default
---
# Source: istio/charts/pilot/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dozing-jackal-pilot
  labels:
    app: pilot
    chart: pilot-0.5.0
    heritage: Tiller
    release: dozing-jackal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dozing-jackal-pilot
subjects:
  - kind: ServiceAccount
    name: dozing-jackal-pilot
    namespace: default
---
# Source: istio/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: istio
    chart: istio-0.5.0
    heritage: Tiller
    release: dozing-jackal
  name: dozing-jackal-istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dozing-jackal-istio
subjects:
  - kind: ServiceAccount
    name: dozing-jackal-istio
    namespace: default
---
# Source: istio/charts/mixer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dozing-jackal-mixer
  labels:
    app: mixer
    chart: mixer-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: mixer
spec:
  ports:
  - name: tcp-plain
    port: 9091
  - name: tcp-mtls
    port: 15004
  - name: http-health
    port: 9093
  - name: configapi
    port: 9094
  - name: statsd-prom
    port: 9102
  - name: statsd-udp
    port: 9125
    protocol: UDP
  - name: prometheus
    port: 42422
  selector:
    app: mixer
    release: dozing-jackal
    istio: mixer
---
# Source: istio/charts/pilot/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dozing-jackal-pilot
  labels:
    app: pilot
    chart: pilot-0.5.0
    release: dozing-jackal
    heritage: Tiller
spec:
  ports:
    - port: 15003
      name: http-discovery
    - port: 443
      name: admission-webhook
  selector:
    app: pilot
    release: dozing-jackal
    istio: pilot
---
# Source: istio/charts/sidecar-injector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dozing-jackal-sidecar-injector
  labels:
    app: sidecar-injector
    chart: sidecar-injector-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: sidecar-injector
spec:
  ports:
  - port: 443
  selector:
    app: sidecar-injector
    release: dozing-jackal
    istio: sidecar-injector
---
# Source: istio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dozing-jackal-ingress
  labels:
    app: istio
    chart: istio-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: ingress
spec:
  type: LoadBalancer
  ports:
  - port: 80
    name: http
  - port: 443
    name: https
  selector:
    app: istio
    release: dozing-jackal
    istio: ingress
---
# Source: istio/charts/mixer/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: dozing-jackal-mixer
  labels:
    app: mixer
    chart: mixer-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: mixer
    checksum/config-volume: 938bf50b1ce719900686f04ef5d9be43d9ac8494da09e1e2f32d9f1cc00e3e56
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: mixer
        release: dozing-jackal
        istio: mixer
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: dozing-jackal-mixer
      containers:
        - name: statsd-to-prometheus
          image: "prom/statsd-exporter:latest"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9102
          - containerPort: 9125
            protocol: UDP
          args:
          - '-statsd.mapping-config=/etc/statsd/mapping.conf'
          resources:
            {}
            
          volumeMounts:
          - name: config-volume
            mountPath: /etc/statsd
        - name: mixer
          image: "docker.io/linsun/mixer:linsun"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9091
          - containerPort: 9094
          - containerPort: 42422
          args:
            - --configStoreURL=k8s://
            - --configDefaultNamespace=default
            - --zipkinURL=http://zipkin:9411/api/v1/spans
            - --logtostderr
            - -v
            - "2"
          resources:
            {}
            
        - name: mixer-proxy
          image: "docker.io/linsun/proxy:linsun"
          imagePullPolicy: 
          ports:
          - containerPort: 15004
          args:
          - proxy
          - mixer
          - -v
          - "2"
          - --controlPlaneAuthPolicy
          - NONE #--controlPlaneAuthPolicy
          - --customConfigFile
          - /etc/istio/proxy/envoy_mixer.json
          resources:
            null
            
          volumeMounts:
          - name: istio-certs
            mountPath: /etc/certs
            readOnly: true
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.dozing-jackal-mixer
          optional: true
      - name: config-volume
        configMap:
          name: dozing-jackal-mixer
---
# Source: istio/charts/pilot/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: dozing-jackal-pilot
  labels:
    app: pilot
    chart: pilot-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: pilot
  annotations:
    checksum/config-volume: f8da08b6b8c170dde721efd680270b2901e750d4aa186ebb6c22bef5b78a43f9
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: pilot
        release: dozing-jackal
        istio: pilot
    spec:
      serviceAccountName: dozing-jackal-pilot
      containers:
        - name: pilot-discovery
          image: "docker.io/linsun/pilot:linsun"
          imagePullPolicy: IfNotPresent
          args: ["discovery", "-v", "2", "--admission-service", "dozing-jackal-pilot"]
          ports:
          - containerPort: 8080
          - containerPort: 443
          readinessProbe:
            httpGet:
              path: /v1/registration
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          resources:
            {}
            
          volumeMounts:
          - name: config-volume
            mountPath: /etc//config
        - name: pilot-proxy
          image: "docker.io/linsun/proxy:linsun"
          imagePullPolicy: 
          ports:
          - containerPort: 15003
          args:
          - proxy
          - pilot
          - -v
          - "2"
          - --discoveryAddress
          - dozing-jackal-pilot:15003
          - --controlPlaneAuthPolicy
          - NONE #--controlPlaneAuthPolicy
          - --customConfigFile
          - /etc/istio/proxy/envoy_pilot.json
          resources:
            null
            
          volumeMounts:
          - name: istio-certs
            mountPath: /etc/certs
            readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: dozing-jackal-istio-mesh-config
      - name: istio-certs
        secret:
          secretName: "istio.dozing-jackal-pilot"
          optional: true
---
# Source: istio/charts/sidecar-injector/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: dozing-jackal-sidecar-injector
  labels:
    app: sidecar-injector
    chart: sidecar-injector-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: sidecar-injector
  annotations:
    checksum/config-volume: d27b702ee0583ac34fccf723697ea4453da177ce491ef21fa00be6135ffa3fef
spec:
  replicas: 
  template:
    metadata:
      labels:
        app: sidecar-injector
        release: dozing-jackal
    spec:
      containers:
        - name: sidecar-injector-webhook
          image: "docker.io/linsun/sidecar_injector:linsun"
          imagePullPolicy: 
          args:
            - --tlsCertFile=/etc/istio/certs/cert.pem
            - --tlsKeyFile=/etc/istio/certs/key.pem
            - --injectConfig=/etc/istio/inject/config
            - --meshConfig=/etc/istio/config/mesh
          volumeMounts:
          - name: config-volume
            mountPath: /etc/istio/config
            readOnly: true
          - name: certs
            mountPath: /etc/istio/certs
            readOnly: true
          - name: inject-config
            mountPath: /etc/istio/inject
            readOnly: true
          resources:
            null
            
      volumes:
      - name: config-volume
        configMap:
          name: dozing-jackal-istio-mesh-config
      - name: certs
        secret:
          secretName: sidecar-injector-certs
      - name: inject-config
        configMap:
          name: dozing-jackal-sidecar-injector
          items:
          - key: config
            path: config
---
# Source: istio/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: dozing-jackal-istio
  labels:
    app: istio
    chart: istio-0.5.0
    release: dozing-jackal
    heritage: Tiller
    istio: ingress
spec:
  replicas: 
  template:
    metadata:
      labels:
        app: istio
        release: dozing-jackal
        istio: ingress
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: dozing-jackal-istio
      containers:
        - name: istio
          image: "docker.io/linsun/proxy:linsun"
          imagePullPolicy: 
          ports:
            - containerPort: 80
              containerPort: 443
          args:
          - proxy
          - ingress
          - -v
          - "2"
          - --discoveryAddress
          - dozing-jackal-pilot:15003
          - --discoveryRefreshDelay
          - '1s' #discoveryRefreshDelay
          - --drainDuration
          - '45s' #drainDuration
          - --parentShutdownDuration
          - '1m0s' #parentShutdownDuration
          - --connectTimeout
          - '10s' #connectTimeout
          - --serviceCluster
          - istio-proxy
          - --zipkinAddress
          - zipkin:9411
          - --statsdUdpAddress
          - dozing-jackal-mixer:9125
          - --proxyAdminPort
          - "15000"
          - --controlPlaneAuthPolicy
          - NONE #--controlPlaneAuthPolicy
          resources:
            {}
